#!/usr/bin/env ruby
# frozen_string_literal: true

THIS_FILE = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__

begin
  require File.expand_path(File.dirname(THIS_FILE) + '/../lib/punchcard')
rescue LoadError
  require 'punchcard'
end

require 'csv'
require 'markdown-tables'
require 'date'
require 'json'

class UnknownActionError < StandardError; end

#
# CLI Wrapper
#

def available_actions
  PunchCard.new(nil).public_methods(false).reject { |item|
    item.to_s.end_with?('=') || item.to_s == 'project'
  }.concat(global_available_actions).sort
end

def global_available_actions
  [:all, :totalsum]
end

def action_available?(action)
  available_actions.include? action.to_sym
end

def exit_with_error!(msg)
  STDERR.puts msg
  exit 1
end

def usage
  "Usage: #{File.basename(__FILE__)} #{available_actions.join('|')} 'Name of my project'"
end

def all(action)
  available_formats = %w[csv plain md]
  unless available_formats.include?(action)
    raise "Format #{action} is not supported. Possible formats are: #{available_formats.join(',')}"
  end

  labels = ['project', 'status', 'last active on', 'total duration', 'hourly rate', 'earnings']
  data = call_punchcards_by_pattern('*', 'csv').map do |csv_string|
    csv_data = CSV.parse(csv_string)[0]
    last_activity = !csv_data[2].empty? ? DateTime.parse(csv_data[2]).to_time.to_i : 0
    csv_data.push(last_activity)
    csv_data
  end.sort_by(&:last).reverse.map do |row|
    row[0...-1]
  end

  return puts('No record(s) so far') if data.empty?

  case action
  when 'md'
    puts MarkdownTables.make_table(labels, data, is_rows: true, align: ['l'])
  when 'csv'
    puts labels.to_csv
    puts data.map(&:to_csv).join
  when 'plain'
    table = MarkdownTables.make_table(labels, data, is_rows: true, align: ['l'])
    puts MarkdownTables.plain_text(table)
  end
end

def call_punchcard(selected_action, project_name)
  if action_available?(selected_action)
    if !project_name && selected_action != 'list'
      exit_with_error!("2nd argument has to be the project name, e.g.:\n#{usage}")
    end
    punch_card = PunchCard.new project_name
    begin
      arguments = ARGV.drop(2)
      if !arguments.empty?
        return punch_card.send(selected_action.to_s, *arguments)
      else
        return punch_card.send(selected_action.to_s)
      end
    rescue PunchCardError => e
      exit_with_error! "Error: #{e.message}"
    end
  else
    exit_with_error! "Unrecognized action '#{selected_action || ''}'\n#{usage}"
  end
end

def call_punchcards_by_pattern(pattern, action)
  Dir["#{PunchCard::SETTINGS_DIR}/#{pattern}"].map do |file|
    project_name = File.basename(file)
    call_punchcard(action, project_name)
  end
end

if ['-h', '--help', 'help'].include?(ARGV.first)
  puts(usage)
  exit
end

selected_action = ARGV[0]
project_name    = ARGV[1]

if selected_action
  begin
    if selected_action == 'all'
      all(ARGV[1] || 'plain')
    elsif selected_action == 'totalsum'
      pattern = ARGV[1] || '*'
      puts PunchCard.humanize_duration(
        call_punchcards_by_pattern(pattern, 'total').reduce(&:+)
      )
    else
      result = call_punchcard(selected_action, project_name)
      if result.is_a?(Hash)
        puts result.to_json
      else
        puts result
      end
    end
  rescue PunchCardError => e
    exit_with_error! "Error: #{e.message}"
  rescue UnknownActionError => e
    exit_with_error! "Unrecognized action '#{selected_action || e.message}'\n#{usage}"
  end
end
