#!/usr/bin/env ruby
# frozen_string_literal: true

THIS_FILE = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__
begin
  require File.expand_path(File.dirname(THIS_FILE) + '/../lib/punchcard.rb')
rescue LoadError
  require 'punchcard'
end

require 'csv'
require 'markdown-tables'
require 'date'
require 'json'

class UnknownActionError < StandardError; end
class InvalidAllArgument < StandardError; end
#
# CLI Wrapper
#

def available_actions
  PunchCard.new(nil).public_methods(false).reject do |item|
    item.to_s.end_with?('=') || item.to_s == 'project'
  end.concat(global_available_actions).sort
end

def global_available_actions
  %i[all totalsum]
end

def action_available?(action)
  available_actions.include? action.to_sym
end

def exit_with_error!(msg)
  STDERR.puts msg
  exit 1
end

def usage
  "Usage: #{File.basename(__FILE__)} #{available_actions.join('|')} 'Name of my project'"
end

def list_all_projects(format)
  data = call_punchcards_by_pattern('*', 'csv').map do |csv_string|
    csv_data = CSV.parse(csv_string)[0]
    last_activity = !csv_data[2].empty? ? Time.parse(csv_data[2]).to_i : 0
    csv_data.push(last_activity)
    csv_data
  end.sort_by(&:last).reverse.map do |row|
    row[0...-1]
  end
  return puts('No record(s) so far') if data.empty?

  puts convert_project_data(format, data)
end

def convert_project_data(format, data)
  labels = ['project', 'status', 'last active on', 'total duration', 'hourly rate', 'earnings']
  case format
  when 'md'
    MarkdownTables.make_table(labels, data, is_rows: true, align: ['l'])
  when 'csv'
    "#{labels.to_csv}\n#{data.map(&:to_csv).join}"
  when 'plain'
    table = MarkdownTables.make_table(labels, data, is_rows: true, align: ['l'])
    MarkdownTables.plain_text(table)
  end
end

def all(action)
  available_formats = %w[csv plain md]
  if available_formats.include?(action)
    list_all_projects(action)
  elsif action_available?(action)
    puts call_punchcards_by_pattern('*', action).to_a.join("\n")
  else
    suppurted_arguments = (available_formats + available_actions).reject {|n| n.to_s == 'all' }.uniq
    raise InvalidAllArgument, "'#{action}' is not supported\nSupported formats and actions: #{suppurted_arguments.join(',')}"
  end
end

def call_punchcard(selected_action:, project_name:, arguments:)
  if action_available?(selected_action)
    if !project_name && selected_action != 'list'
      exit_with_error!("2nd argument has to be the project name, e.g.:\n#{usage}")
    end
    punch_card = PunchCard.new project_name
    begin
      if arguments.nil? || arguments.empty?
        punch_card.public_send(selected_action.to_s)
      elsif arguments.is_a?(Hash)
        punch_card.public_send(selected_action.to_s, arguments)
      else
        punch_card.public_send(selected_action.to_s, *arguments)
      end
    rescue PunchCardError => e
      exit_with_error! "Error: #{e.message}"
    end
  else
    exit_with_error! "Unrecognized action '#{selected_action || ''}'\n#{usage}"
  end
end

def cli_argument_by_name(name)
  value = ARGV.filter { |arg| arg.start_with?("--#{name}=") }&.first
  value = value.split('=')[1] unless value.nil?
  if block_given? && !value.nil? && !value.empty?
    yield value
  else
    value
  end
end

def call_punchcards_by_pattern(pattern, action)
  path_patterns = [
    "#{PunchCard::SETTINGS_DIR}/#{pattern}*",
    "#{PunchCard::SETTINGS_DIR}/*#{pattern}*"
  ]
  arguments = {}
  if %w(csv plain md total).include?(action)
    arguments = {
      start_at: cli_argument_by_name('startAt') { |v| Date.parse(v) },
      end_at: cli_argument_by_name('endAt') { |v| Date.parse(v) }
    }
  end
  found = []
  path_patterns.each do |path_pattern|
    found = Dir[path_pattern].map do |file|
      project_name = File.basename(file)
      call_punchcard(
        selected_action: action,
        project_name: project_name,
        arguments: arguments
      )
    end
    break if found.any?
  end
  found
end

def validate_project_name_and_stop_if_invalid(project_name)
  if project_name.strip.strip.start_with?('.')
    STDERR.puts "Error: project name's are not allowed to start with '.'"
    exit 1
  end
end

if ['-h', '--help', 'help'].include?(ARGV.first)
  puts(usage)
  exit
end

selected_action = ARGV[0]
project_name    = ARGV[1]

if selected_action
  begin
    if selected_action == 'all'
      all(ARGV[1] || 'plain')
    elsif selected_action == 'totalsum'
      pattern_argument = ARGV.slice(1)
      pattern = !pattern_argument || pattern_argument.empty? || pattern_argument.start_with?('--') ? '*' : pattern_argument
      puts PunchCard.humanize_duration(
        call_punchcards_by_pattern(pattern, 'total').reduce(&:+)
      )
    else
      validate_project_name_and_stop_if_invalid(project_name)
      result = call_punchcard(
        selected_action: selected_action,
        project_name: project_name,
        arguments: ARGV.drop(2)
      )
      if result.is_a?(Hash)
        puts result.to_json
      else
        puts result
      end
    end
  rescue InvalidAllArgument => e
    exit_with_error! e.message
  rescue PunchCardError => e
    exit_with_error! "Error: #{e.message}"
  rescue UnknownActionError => e
    exit_with_error! "Unrecognized action '#{selected_action || e.message}'\n#{usage}"
  end
end
