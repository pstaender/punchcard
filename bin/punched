#!/usr/bin/env ruby
$LOAD_PATH.push File.expand_path('lib', __dir__)

require 'punchcard.rb'
require 'csv'
require 'markdown-tables'
require 'date'
require 'json'

class UnknownActionError < StandardError; end

#
# CLI Wrapper
#

def available_actions
  PunchCard.new(nil).public_methods(false).reject { |item| item.to_s.end_with?('=') || item.to_s == 'project' }.concat([:all]).sort
end

def action_available?(action)
  available_actions.include? action.to_sym
end

def exit_with_error!(msg)
  STDERR.puts msg
  exit 1
end

def usage
  "Usage: #{File.basename(__FILE__)} #{available_actions.join('|')} 'Name of my project'"
end

def all(action)
  available_formats = %w[csv plain md]
  unless available_formats.include?(action)
    raise "Format #{action} is not supported. Possible formats are: #{available_formats.join(',')}"
  end

  labels = ['project', 'status', 'last active on', 'total duration', 'hourly rate', 'earnings']
  data = Dir[PunchCard::SETTINGS_DIR + '/*'].map do |file|
    data = CSV.parse(call_punchcard('csv', File.basename(file)))[0]
    last_activity = !data[2].empty? ? DateTime.parse(data[2]).to_time.to_i : 0
    data.push(last_activity)
    data
  end.sort_by(&:last).reverse.map do |row|
    row[0...-1]
  end

  return puts('No record(s) so far') if data.empty?

  case action
  when 'md'
    puts MarkdownTables.make_table(labels, data, is_rows: true, align: ['l'])
  when 'csv'
    puts labels.to_csv
    puts data.map(&:to_csv).join
  when 'plain'
    table = MarkdownTables.make_table(labels, data, is_rows: true, align: ['l'])
    puts MarkdownTables.plain_text(table)
  end
end

def call_punchcard(selected_action, project_name)
  if action_available?(selected_action)
    if !project_name && selected_action != 'list'
      exit_with_error!("2nd argument has to be the project name, e.g.:\n#{usage}")
    end
    punch_card = PunchCard.new project_name
    begin
      arguments = ARGV.drop(2)
      if !arguments.empty?
        return punch_card.send(selected_action.to_s, *arguments)
      else
        return punch_card.send(selected_action.to_s)
      end
    rescue PunchCardError => e
      exit_with_error! "Error: #{e.message}"
    end
  else
    exit_with_error! "Unrecognized action '#{selected_action || ''}'\n#{usage}"
  end
end

if ['-h', '--help', 'help'].include?(ARGV.first)
  puts(usage)
  exit
end

selected_action = ARGV[0]
project_name    = ARGV[1]

if selected_action
  begin
    if selected_action == 'all'
      all(ARGV[1] || 'plain')
    else
      result = call_punchcard(selected_action, project_name)
      if result.is_a?(Hash)
        puts result.to_json
      else
        puts result
      end
    end
  rescue PunchCardError => e
    exit_with_error! "Error: #{e.message}"
  rescue UnknownActionError => e
    exit_with_error! "Unrecognized action '#{selected_action || ''}'\n#{usage}"
  end
end
